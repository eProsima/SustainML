// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file typesImpl.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_TYPESIMPL_H_
#define _FAST_DDS_GENERATED_TYPESIMPL_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TYPESIMPL_SOURCE)
#define TYPESIMPL_DllAPI __declspec( dllexport )
#else
#define TYPESIMPL_DllAPI __declspec( dllimport )
#endif // TYPESIMPL_SOURCE
#else
#define TYPESIMPL_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TYPESIMPL_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



/*!
 * @brief This class represents the enumeration Status defined by the user in the IDL file.
 * @ingroup typesImpl
 */
enum Status : uint32_t
{
    NODE_INACTIVE,
    NODE_ERROR,
    NODE_IDLE,
    NODE_INITIALIZING,
    NODE_RUNNING,
    NODE_TERMINATING
};
/*!
 * @brief This class represents the enumeration TaskStatus defined by the user in the IDL file.
 * @ingroup typesImpl
 */
enum TaskStatus : uint32_t
{
    TASK_WAITING,
    TASK_ERROR,
    TASK_RUNNING,
    TASK_SUCCEEDED
};
/*!
 * @brief This class represents the enumeration ErrorCode defined by the user in the IDL file.
 * @ingroup typesImpl
 */
enum ErrorCode : uint32_t
{
    NO_ERROR,
    INTERNAL_ERROR
};


/*!
 * @brief This class represents the structure TaskIdImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class TaskIdImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TaskIdImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TaskIdImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TaskIdImpl that will be copied.
     */
    eProsima_user_DllExport TaskIdImpl(
            const TaskIdImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TaskIdImpl that will be copied.
     */
    eProsima_user_DllExport TaskIdImpl(
            TaskIdImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TaskIdImpl that will be copied.
     */
    eProsima_user_DllExport TaskIdImpl& operator =(
            const TaskIdImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TaskIdImpl that will be copied.
     */
    eProsima_user_DllExport TaskIdImpl& operator =(
            TaskIdImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x TaskIdImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const TaskIdImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x TaskIdImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const TaskIdImpl& x) const;

    /*!
     * @brief This function sets a value in member problem_id
     * @param _problem_id New value for member problem_id
     */
    eProsima_user_DllExport void problem_id(
            uint32_t _problem_id);

    /*!
     * @brief This function returns the value of member problem_id
     * @return Value of member problem_id
     */
    eProsima_user_DllExport uint32_t problem_id() const;

    /*!
     * @brief This function returns a reference to member problem_id
     * @return Reference to member problem_id
     */
    eProsima_user_DllExport uint32_t& problem_id();


    /*!
     * @brief This function sets a value in member iteration_id
     * @param _iteration_id New value for member iteration_id
     */
    eProsima_user_DllExport void iteration_id(
            uint32_t _iteration_id);

    /*!
     * @brief This function returns the value of member iteration_id
     * @return Value of member iteration_id
     */
    eProsima_user_DllExport uint32_t iteration_id() const;

    /*!
     * @brief This function returns a reference to member iteration_id
     * @return Reference to member iteration_id
     */
    eProsima_user_DllExport uint32_t& iteration_id();

private:

    uint32_t m_problem_id{0};
    uint32_t m_iteration_id{0};

};


/*!
 * @brief This class represents the structure NodeStatusImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class NodeStatusImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NodeStatusImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NodeStatusImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NodeStatusImpl that will be copied.
     */
    eProsima_user_DllExport NodeStatusImpl(
            const NodeStatusImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NodeStatusImpl that will be copied.
     */
    eProsima_user_DllExport NodeStatusImpl(
            NodeStatusImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NodeStatusImpl that will be copied.
     */
    eProsima_user_DllExport NodeStatusImpl& operator =(
            const NodeStatusImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NodeStatusImpl that will be copied.
     */
    eProsima_user_DllExport NodeStatusImpl& operator =(
            NodeStatusImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x NodeStatusImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NodeStatusImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x NodeStatusImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NodeStatusImpl& x) const;

    /*!
     * @brief This function sets a value in member node_status
     * @param _node_status New value for member node_status
     */
    eProsima_user_DllExport void node_status(
            Status _node_status);

    /*!
     * @brief This function returns the value of member node_status
     * @return Value of member node_status
     */
    eProsima_user_DllExport Status node_status() const;

    /*!
     * @brief This function returns a reference to member node_status
     * @return Reference to member node_status
     */
    eProsima_user_DllExport Status& node_status();


    /*!
     * @brief This function sets a value in member task_status
     * @param _task_status New value for member task_status
     */
    eProsima_user_DllExport void task_status(
            TaskStatus _task_status);

    /*!
     * @brief This function returns the value of member task_status
     * @return Value of member task_status
     */
    eProsima_user_DllExport TaskStatus task_status() const;

    /*!
     * @brief This function returns a reference to member task_status
     * @return Reference to member task_status
     */
    eProsima_user_DllExport TaskStatus& task_status();


    /*!
     * @brief This function sets a value in member error_code
     * @param _error_code New value for member error_code
     */
    eProsima_user_DllExport void error_code(
            ErrorCode _error_code);

    /*!
     * @brief This function returns the value of member error_code
     * @return Value of member error_code
     */
    eProsima_user_DllExport ErrorCode error_code() const;

    /*!
     * @brief This function returns a reference to member error_code
     * @return Reference to member error_code
     */
    eProsima_user_DllExport ErrorCode& error_code();


    /*!
     * @brief This function copies the value in member error_description
     * @param _error_description New value to be copied in member error_description
     */
    eProsima_user_DllExport void error_description(
            const std::string& _error_description);

    /*!
     * @brief This function moves the value in member error_description
     * @param _error_description New value to be moved in member error_description
     */
    eProsima_user_DllExport void error_description(
            std::string&& _error_description);

    /*!
     * @brief This function returns a constant reference to member error_description
     * @return Constant reference to member error_description
     */
    eProsima_user_DllExport const std::string& error_description() const;

    /*!
     * @brief This function returns a reference to member error_description
     * @return Reference to member error_description
     */
    eProsima_user_DllExport std::string& error_description();


    /*!
     * @brief This function copies the value in member node_name
     * @param _node_name New value to be copied in member node_name
     */
    eProsima_user_DllExport void node_name(
            const std::string& _node_name);

    /*!
     * @brief This function moves the value in member node_name
     * @param _node_name New value to be moved in member node_name
     */
    eProsima_user_DllExport void node_name(
            std::string&& _node_name);

    /*!
     * @brief This function returns a constant reference to member node_name
     * @return Constant reference to member node_name
     */
    eProsima_user_DllExport const std::string& node_name() const;

    /*!
     * @brief This function returns a reference to member node_name
     * @return Reference to member node_name
     */
    eProsima_user_DllExport std::string& node_name();


    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const TaskIdImpl& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            TaskIdImpl&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const TaskIdImpl& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport TaskIdImpl& task_id();

private:

    Status m_node_status{::NODE_INACTIVE};
    TaskStatus m_task_status{::TASK_WAITING};
    ErrorCode m_error_code{::NO_ERROR};
    std::string m_error_description;
    std::string m_node_name;
    TaskIdImpl m_task_id;

};
/*!
 * @brief This class represents the enumeration CmdNode defined by the user in the IDL file.
 * @ingroup typesImpl
 */
enum CmdNode : uint32_t
{
    NO_CMD_NODE,
    START_NODE,
    STOP_NODE,
    RESET_NODE,
    TERMINATE_NODE
};
/*!
 * @brief This class represents the enumeration CmdTask defined by the user in the IDL file.
 * @ingroup typesImpl
 */
enum CmdTask : uint32_t
{
    NO_CMD_TASK,
    STOP_TASK,
    RESET_TASK,
    PREEMPT_TASK,
    TERMINATE_TASK
};


/*!
 * @brief This class represents the structure NodeControlImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class NodeControlImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NodeControlImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NodeControlImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NodeControlImpl that will be copied.
     */
    eProsima_user_DllExport NodeControlImpl(
            const NodeControlImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NodeControlImpl that will be copied.
     */
    eProsima_user_DllExport NodeControlImpl(
            NodeControlImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NodeControlImpl that will be copied.
     */
    eProsima_user_DllExport NodeControlImpl& operator =(
            const NodeControlImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NodeControlImpl that will be copied.
     */
    eProsima_user_DllExport NodeControlImpl& operator =(
            NodeControlImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x NodeControlImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NodeControlImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x NodeControlImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NodeControlImpl& x) const;

    /*!
     * @brief This function sets a value in member cmd_node
     * @param _cmd_node New value for member cmd_node
     */
    eProsima_user_DllExport void cmd_node(
            CmdNode _cmd_node);

    /*!
     * @brief This function returns the value of member cmd_node
     * @return Value of member cmd_node
     */
    eProsima_user_DllExport CmdNode cmd_node() const;

    /*!
     * @brief This function returns a reference to member cmd_node
     * @return Reference to member cmd_node
     */
    eProsima_user_DllExport CmdNode& cmd_node();


    /*!
     * @brief This function sets a value in member cmd_task
     * @param _cmd_task New value for member cmd_task
     */
    eProsima_user_DllExport void cmd_task(
            CmdTask _cmd_task);

    /*!
     * @brief This function returns the value of member cmd_task
     * @return Value of member cmd_task
     */
    eProsima_user_DllExport CmdTask cmd_task() const;

    /*!
     * @brief This function returns a reference to member cmd_task
     * @return Reference to member cmd_task
     */
    eProsima_user_DllExport CmdTask& cmd_task();


    /*!
     * @brief This function copies the value in member target_node
     * @param _target_node New value to be copied in member target_node
     */
    eProsima_user_DllExport void target_node(
            const std::string& _target_node);

    /*!
     * @brief This function moves the value in member target_node
     * @param _target_node New value to be moved in member target_node
     */
    eProsima_user_DllExport void target_node(
            std::string&& _target_node);

    /*!
     * @brief This function returns a constant reference to member target_node
     * @return Constant reference to member target_node
     */
    eProsima_user_DllExport const std::string& target_node() const;

    /*!
     * @brief This function returns a reference to member target_node
     * @return Reference to member target_node
     */
    eProsima_user_DllExport std::string& target_node();


    /*!
     * @brief This function copies the value in member source_node
     * @param _source_node New value to be copied in member source_node
     */
    eProsima_user_DllExport void source_node(
            const std::string& _source_node);

    /*!
     * @brief This function moves the value in member source_node
     * @param _source_node New value to be moved in member source_node
     */
    eProsima_user_DllExport void source_node(
            std::string&& _source_node);

    /*!
     * @brief This function returns a constant reference to member source_node
     * @return Constant reference to member source_node
     */
    eProsima_user_DllExport const std::string& source_node() const;

    /*!
     * @brief This function returns a reference to member source_node
     * @return Reference to member source_node
     */
    eProsima_user_DllExport std::string& source_node();


    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const TaskIdImpl& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            TaskIdImpl&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const TaskIdImpl& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport TaskIdImpl& task_id();

private:

    CmdNode m_cmd_node{::NO_CMD_NODE};
    CmdTask m_cmd_task{::NO_CMD_TASK};
    std::string m_target_node;
    std::string m_source_node;
    TaskIdImpl m_task_id;

};


/*!
 * @brief This class represents the structure UserInputImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class UserInputImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UserInputImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UserInputImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UserInputImpl that will be copied.
     */
    eProsima_user_DllExport UserInputImpl(
            const UserInputImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UserInputImpl that will be copied.
     */
    eProsima_user_DllExport UserInputImpl(
            UserInputImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UserInputImpl that will be copied.
     */
    eProsima_user_DllExport UserInputImpl& operator =(
            const UserInputImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UserInputImpl that will be copied.
     */
    eProsima_user_DllExport UserInputImpl& operator =(
            UserInputImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x UserInputImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const UserInputImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x UserInputImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const UserInputImpl& x) const;

    /*!
     * @brief This function copies the value in member modality
     * @param _modality New value to be copied in member modality
     */
    eProsima_user_DllExport void modality(
            const std::string& _modality);

    /*!
     * @brief This function moves the value in member modality
     * @param _modality New value to be moved in member modality
     */
    eProsima_user_DllExport void modality(
            std::string&& _modality);

    /*!
     * @brief This function returns a constant reference to member modality
     * @return Constant reference to member modality
     */
    eProsima_user_DllExport const std::string& modality() const;

    /*!
     * @brief This function returns a reference to member modality
     * @return Reference to member modality
     */
    eProsima_user_DllExport std::string& modality();


    /*!
     * @brief This function copies the value in member problem_short_description
     * @param _problem_short_description New value to be copied in member problem_short_description
     */
    eProsima_user_DllExport void problem_short_description(
            const std::string& _problem_short_description);

    /*!
     * @brief This function moves the value in member problem_short_description
     * @param _problem_short_description New value to be moved in member problem_short_description
     */
    eProsima_user_DllExport void problem_short_description(
            std::string&& _problem_short_description);

    /*!
     * @brief This function returns a constant reference to member problem_short_description
     * @return Constant reference to member problem_short_description
     */
    eProsima_user_DllExport const std::string& problem_short_description() const;

    /*!
     * @brief This function returns a reference to member problem_short_description
     * @return Reference to member problem_short_description
     */
    eProsima_user_DllExport std::string& problem_short_description();


    /*!
     * @brief This function copies the value in member problem_definition
     * @param _problem_definition New value to be copied in member problem_definition
     */
    eProsima_user_DllExport void problem_definition(
            const std::string& _problem_definition);

    /*!
     * @brief This function moves the value in member problem_definition
     * @param _problem_definition New value to be moved in member problem_definition
     */
    eProsima_user_DllExport void problem_definition(
            std::string&& _problem_definition);

    /*!
     * @brief This function returns a constant reference to member problem_definition
     * @return Constant reference to member problem_definition
     */
    eProsima_user_DllExport const std::string& problem_definition() const;

    /*!
     * @brief This function returns a reference to member problem_definition
     * @return Reference to member problem_definition
     */
    eProsima_user_DllExport std::string& problem_definition();


    /*!
     * @brief This function copies the value in member inputs
     * @param _inputs New value to be copied in member inputs
     */
    eProsima_user_DllExport void inputs(
            const std::vector<std::string>& _inputs);

    /*!
     * @brief This function moves the value in member inputs
     * @param _inputs New value to be moved in member inputs
     */
    eProsima_user_DllExport void inputs(
            std::vector<std::string>&& _inputs);

    /*!
     * @brief This function returns a constant reference to member inputs
     * @return Constant reference to member inputs
     */
    eProsima_user_DllExport const std::vector<std::string>& inputs() const;

    /*!
     * @brief This function returns a reference to member inputs
     * @return Reference to member inputs
     */
    eProsima_user_DllExport std::vector<std::string>& inputs();


    /*!
     * @brief This function copies the value in member outputs
     * @param _outputs New value to be copied in member outputs
     */
    eProsima_user_DllExport void outputs(
            const std::vector<std::string>& _outputs);

    /*!
     * @brief This function moves the value in member outputs
     * @param _outputs New value to be moved in member outputs
     */
    eProsima_user_DllExport void outputs(
            std::vector<std::string>&& _outputs);

    /*!
     * @brief This function returns a constant reference to member outputs
     * @return Constant reference to member outputs
     */
    eProsima_user_DllExport const std::vector<std::string>& outputs() const;

    /*!
     * @brief This function returns a reference to member outputs
     * @return Reference to member outputs
     */
    eProsima_user_DllExport std::vector<std::string>& outputs();


    /*!
     * @brief This function sets a value in member minimum_samples
     * @param _minimum_samples New value for member minimum_samples
     */
    eProsima_user_DllExport void minimum_samples(
            uint32_t _minimum_samples);

    /*!
     * @brief This function returns the value of member minimum_samples
     * @return Value of member minimum_samples
     */
    eProsima_user_DllExport uint32_t minimum_samples() const;

    /*!
     * @brief This function returns a reference to member minimum_samples
     * @return Reference to member minimum_samples
     */
    eProsima_user_DllExport uint32_t& minimum_samples();


    /*!
     * @brief This function sets a value in member maximum_samples
     * @param _maximum_samples New value for member maximum_samples
     */
    eProsima_user_DllExport void maximum_samples(
            uint32_t _maximum_samples);

    /*!
     * @brief This function returns the value of member maximum_samples
     * @return Value of member maximum_samples
     */
    eProsima_user_DllExport uint32_t maximum_samples() const;

    /*!
     * @brief This function returns a reference to member maximum_samples
     * @return Reference to member maximum_samples
     */
    eProsima_user_DllExport uint32_t& maximum_samples();


    /*!
     * @brief This function sets a value in member optimize_carbon_footprint_manual
     * @param _optimize_carbon_footprint_manual New value for member optimize_carbon_footprint_manual
     */
    eProsima_user_DllExport void optimize_carbon_footprint_manual(
            bool _optimize_carbon_footprint_manual);

    /*!
     * @brief This function returns the value of member optimize_carbon_footprint_manual
     * @return Value of member optimize_carbon_footprint_manual
     */
    eProsima_user_DllExport bool optimize_carbon_footprint_manual() const;

    /*!
     * @brief This function returns a reference to member optimize_carbon_footprint_manual
     * @return Reference to member optimize_carbon_footprint_manual
     */
    eProsima_user_DllExport bool& optimize_carbon_footprint_manual();


    /*!
     * @brief This function sets a value in member previous_iteration
     * @param _previous_iteration New value for member previous_iteration
     */
    eProsima_user_DllExport void previous_iteration(
            int32_t _previous_iteration);

    /*!
     * @brief This function returns the value of member previous_iteration
     * @return Value of member previous_iteration
     */
    eProsima_user_DllExport int32_t previous_iteration() const;

    /*!
     * @brief This function returns a reference to member previous_iteration
     * @return Reference to member previous_iteration
     */
    eProsima_user_DllExport int32_t& previous_iteration();


    /*!
     * @brief This function sets a value in member optimize_carbon_footprint_auto
     * @param _optimize_carbon_footprint_auto New value for member optimize_carbon_footprint_auto
     */
    eProsima_user_DllExport void optimize_carbon_footprint_auto(
            bool _optimize_carbon_footprint_auto);

    /*!
     * @brief This function returns the value of member optimize_carbon_footprint_auto
     * @return Value of member optimize_carbon_footprint_auto
     */
    eProsima_user_DllExport bool optimize_carbon_footprint_auto() const;

    /*!
     * @brief This function returns a reference to member optimize_carbon_footprint_auto
     * @return Reference to member optimize_carbon_footprint_auto
     */
    eProsima_user_DllExport bool& optimize_carbon_footprint_auto();


    /*!
     * @brief This function sets a value in member desired_carbon_footprint
     * @param _desired_carbon_footprint New value for member desired_carbon_footprint
     */
    eProsima_user_DllExport void desired_carbon_footprint(
            double _desired_carbon_footprint);

    /*!
     * @brief This function returns the value of member desired_carbon_footprint
     * @return Value of member desired_carbon_footprint
     */
    eProsima_user_DllExport double desired_carbon_footprint() const;

    /*!
     * @brief This function returns a reference to member desired_carbon_footprint
     * @return Reference to member desired_carbon_footprint
     */
    eProsima_user_DllExport double& desired_carbon_footprint();


    /*!
     * @brief This function copies the value in member geo_location_continent
     * @param _geo_location_continent New value to be copied in member geo_location_continent
     */
    eProsima_user_DllExport void geo_location_continent(
            const std::string& _geo_location_continent);

    /*!
     * @brief This function moves the value in member geo_location_continent
     * @param _geo_location_continent New value to be moved in member geo_location_continent
     */
    eProsima_user_DllExport void geo_location_continent(
            std::string&& _geo_location_continent);

    /*!
     * @brief This function returns a constant reference to member geo_location_continent
     * @return Constant reference to member geo_location_continent
     */
    eProsima_user_DllExport const std::string& geo_location_continent() const;

    /*!
     * @brief This function returns a reference to member geo_location_continent
     * @return Reference to member geo_location_continent
     */
    eProsima_user_DllExport std::string& geo_location_continent();


    /*!
     * @brief This function copies the value in member geo_location_region
     * @param _geo_location_region New value to be copied in member geo_location_region
     */
    eProsima_user_DllExport void geo_location_region(
            const std::string& _geo_location_region);

    /*!
     * @brief This function moves the value in member geo_location_region
     * @param _geo_location_region New value to be moved in member geo_location_region
     */
    eProsima_user_DllExport void geo_location_region(
            std::string&& _geo_location_region);

    /*!
     * @brief This function returns a constant reference to member geo_location_region
     * @return Constant reference to member geo_location_region
     */
    eProsima_user_DllExport const std::string& geo_location_region() const;

    /*!
     * @brief This function returns a reference to member geo_location_region
     * @return Reference to member geo_location_region
     */
    eProsima_user_DllExport std::string& geo_location_region();


    /*!
     * @brief This function copies the value in member extra_data
     * @param _extra_data New value to be copied in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            const std::vector<uint8_t>& _extra_data);

    /*!
     * @brief This function moves the value in member extra_data
     * @param _extra_data New value to be moved in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            std::vector<uint8_t>&& _extra_data);

    /*!
     * @brief This function returns a constant reference to member extra_data
     * @return Constant reference to member extra_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& extra_data() const;

    /*!
     * @brief This function returns a reference to member extra_data
     * @return Reference to member extra_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& extra_data();


    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const TaskIdImpl& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            TaskIdImpl&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const TaskIdImpl& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport TaskIdImpl& task_id();

private:

    std::string m_modality;
    std::string m_problem_short_description;
    std::string m_problem_definition;
    std::vector<std::string> m_inputs;
    std::vector<std::string> m_outputs;
    uint32_t m_minimum_samples{0};
    uint32_t m_maximum_samples{0};
    bool m_optimize_carbon_footprint_manual{false};
    int32_t m_previous_iteration{0};
    bool m_optimize_carbon_footprint_auto{false};
    double m_desired_carbon_footprint{0.0};
    std::string m_geo_location_continent;
    std::string m_geo_location_region;
    std::vector<uint8_t> m_extra_data;
    TaskIdImpl m_task_id;

};


/*!
 * @brief This class represents the structure MLModelMetadataImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class MLModelMetadataImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MLModelMetadataImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MLModelMetadataImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MLModelMetadataImpl that will be copied.
     */
    eProsima_user_DllExport MLModelMetadataImpl(
            const MLModelMetadataImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MLModelMetadataImpl that will be copied.
     */
    eProsima_user_DllExport MLModelMetadataImpl(
            MLModelMetadataImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MLModelMetadataImpl that will be copied.
     */
    eProsima_user_DllExport MLModelMetadataImpl& operator =(
            const MLModelMetadataImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MLModelMetadataImpl that will be copied.
     */
    eProsima_user_DllExport MLModelMetadataImpl& operator =(
            MLModelMetadataImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x MLModelMetadataImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MLModelMetadataImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MLModelMetadataImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MLModelMetadataImpl& x) const;

    /*!
     * @brief This function copies the value in member keywords
     * @param _keywords New value to be copied in member keywords
     */
    eProsima_user_DllExport void keywords(
            const std::vector<std::string>& _keywords);

    /*!
     * @brief This function moves the value in member keywords
     * @param _keywords New value to be moved in member keywords
     */
    eProsima_user_DllExport void keywords(
            std::vector<std::string>&& _keywords);

    /*!
     * @brief This function returns a constant reference to member keywords
     * @return Constant reference to member keywords
     */
    eProsima_user_DllExport const std::vector<std::string>& keywords() const;

    /*!
     * @brief This function returns a reference to member keywords
     * @return Reference to member keywords
     */
    eProsima_user_DllExport std::vector<std::string>& keywords();


    /*!
     * @brief This function copies the value in member ml_model_metadata
     * @param _ml_model_metadata New value to be copied in member ml_model_metadata
     */
    eProsima_user_DllExport void ml_model_metadata(
            const std::vector<std::string>& _ml_model_metadata);

    /*!
     * @brief This function moves the value in member ml_model_metadata
     * @param _ml_model_metadata New value to be moved in member ml_model_metadata
     */
    eProsima_user_DllExport void ml_model_metadata(
            std::vector<std::string>&& _ml_model_metadata);

    /*!
     * @brief This function returns a constant reference to member ml_model_metadata
     * @return Constant reference to member ml_model_metadata
     */
    eProsima_user_DllExport const std::vector<std::string>& ml_model_metadata() const;

    /*!
     * @brief This function returns a reference to member ml_model_metadata
     * @return Reference to member ml_model_metadata
     */
    eProsima_user_DllExport std::vector<std::string>& ml_model_metadata();


    /*!
     * @brief This function copies the value in member extra_data
     * @param _extra_data New value to be copied in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            const std::vector<uint8_t>& _extra_data);

    /*!
     * @brief This function moves the value in member extra_data
     * @param _extra_data New value to be moved in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            std::vector<uint8_t>&& _extra_data);

    /*!
     * @brief This function returns a constant reference to member extra_data
     * @return Constant reference to member extra_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& extra_data() const;

    /*!
     * @brief This function returns a reference to member extra_data
     * @return Reference to member extra_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& extra_data();


    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const TaskIdImpl& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            TaskIdImpl&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const TaskIdImpl& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport TaskIdImpl& task_id();

private:

    std::vector<std::string> m_keywords;
    std::vector<std::string> m_ml_model_metadata;
    std::vector<uint8_t> m_extra_data;
    TaskIdImpl m_task_id;

};


/*!
 * @brief This class represents the structure AppRequirementsImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class AppRequirementsImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppRequirementsImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppRequirementsImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppRequirementsImpl that will be copied.
     */
    eProsima_user_DllExport AppRequirementsImpl(
            const AppRequirementsImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppRequirementsImpl that will be copied.
     */
    eProsima_user_DllExport AppRequirementsImpl(
            AppRequirementsImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppRequirementsImpl that will be copied.
     */
    eProsima_user_DllExport AppRequirementsImpl& operator =(
            const AppRequirementsImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppRequirementsImpl that will be copied.
     */
    eProsima_user_DllExport AppRequirementsImpl& operator =(
            AppRequirementsImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppRequirementsImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppRequirementsImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppRequirementsImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppRequirementsImpl& x) const;

    /*!
     * @brief This function copies the value in member app_requirements
     * @param _app_requirements New value to be copied in member app_requirements
     */
    eProsima_user_DllExport void app_requirements(
            const std::vector<std::string>& _app_requirements);

    /*!
     * @brief This function moves the value in member app_requirements
     * @param _app_requirements New value to be moved in member app_requirements
     */
    eProsima_user_DllExport void app_requirements(
            std::vector<std::string>&& _app_requirements);

    /*!
     * @brief This function returns a constant reference to member app_requirements
     * @return Constant reference to member app_requirements
     */
    eProsima_user_DllExport const std::vector<std::string>& app_requirements() const;

    /*!
     * @brief This function returns a reference to member app_requirements
     * @return Reference to member app_requirements
     */
    eProsima_user_DllExport std::vector<std::string>& app_requirements();


    /*!
     * @brief This function copies the value in member extra_data
     * @param _extra_data New value to be copied in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            const std::vector<uint8_t>& _extra_data);

    /*!
     * @brief This function moves the value in member extra_data
     * @param _extra_data New value to be moved in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            std::vector<uint8_t>&& _extra_data);

    /*!
     * @brief This function returns a constant reference to member extra_data
     * @return Constant reference to member extra_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& extra_data() const;

    /*!
     * @brief This function returns a reference to member extra_data
     * @return Reference to member extra_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& extra_data();


    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const TaskIdImpl& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            TaskIdImpl&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const TaskIdImpl& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport TaskIdImpl& task_id();

private:

    std::vector<std::string> m_app_requirements;
    std::vector<uint8_t> m_extra_data;
    TaskIdImpl m_task_id;

};


/*!
 * @brief This class represents the structure HWConstraintsImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class HWConstraintsImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport HWConstraintsImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~HWConstraintsImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object HWConstraintsImpl that will be copied.
     */
    eProsima_user_DllExport HWConstraintsImpl(
            const HWConstraintsImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object HWConstraintsImpl that will be copied.
     */
    eProsima_user_DllExport HWConstraintsImpl(
            HWConstraintsImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object HWConstraintsImpl that will be copied.
     */
    eProsima_user_DllExport HWConstraintsImpl& operator =(
            const HWConstraintsImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object HWConstraintsImpl that will be copied.
     */
    eProsima_user_DllExport HWConstraintsImpl& operator =(
            HWConstraintsImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x HWConstraintsImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const HWConstraintsImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x HWConstraintsImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const HWConstraintsImpl& x) const;

    /*!
     * @brief This function sets a value in member max_memory_footprint
     * @param _max_memory_footprint New value for member max_memory_footprint
     */
    eProsima_user_DllExport void max_memory_footprint(
            uint32_t _max_memory_footprint);

    /*!
     * @brief This function returns the value of member max_memory_footprint
     * @return Value of member max_memory_footprint
     */
    eProsima_user_DllExport uint32_t max_memory_footprint() const;

    /*!
     * @brief This function returns a reference to member max_memory_footprint
     * @return Reference to member max_memory_footprint
     */
    eProsima_user_DllExport uint32_t& max_memory_footprint();


    /*!
     * @brief This function copies the value in member extra_data
     * @param _extra_data New value to be copied in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            const std::vector<uint8_t>& _extra_data);

    /*!
     * @brief This function moves the value in member extra_data
     * @param _extra_data New value to be moved in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            std::vector<uint8_t>&& _extra_data);

    /*!
     * @brief This function returns a constant reference to member extra_data
     * @return Constant reference to member extra_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& extra_data() const;

    /*!
     * @brief This function returns a reference to member extra_data
     * @return Reference to member extra_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& extra_data();


    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const TaskIdImpl& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            TaskIdImpl&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const TaskIdImpl& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport TaskIdImpl& task_id();

private:

    uint32_t m_max_memory_footprint{0};
    std::vector<uint8_t> m_extra_data;
    TaskIdImpl m_task_id;

};


/*!
 * @brief This class represents the structure MLModelImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class MLModelImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MLModelImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MLModelImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MLModelImpl that will be copied.
     */
    eProsima_user_DllExport MLModelImpl(
            const MLModelImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MLModelImpl that will be copied.
     */
    eProsima_user_DllExport MLModelImpl(
            MLModelImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MLModelImpl that will be copied.
     */
    eProsima_user_DllExport MLModelImpl& operator =(
            const MLModelImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MLModelImpl that will be copied.
     */
    eProsima_user_DllExport MLModelImpl& operator =(
            MLModelImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x MLModelImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MLModelImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MLModelImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MLModelImpl& x) const;

    /*!
     * @brief This function copies the value in member model_path
     * @param _model_path New value to be copied in member model_path
     */
    eProsima_user_DllExport void model_path(
            const std::string& _model_path);

    /*!
     * @brief This function moves the value in member model_path
     * @param _model_path New value to be moved in member model_path
     */
    eProsima_user_DllExport void model_path(
            std::string&& _model_path);

    /*!
     * @brief This function returns a constant reference to member model_path
     * @return Constant reference to member model_path
     */
    eProsima_user_DllExport const std::string& model_path() const;

    /*!
     * @brief This function returns a reference to member model_path
     * @return Reference to member model_path
     */
    eProsima_user_DllExport std::string& model_path();


    /*!
     * @brief This function copies the value in member model
     * @param _model New value to be copied in member model
     */
    eProsima_user_DllExport void model(
            const std::string& _model);

    /*!
     * @brief This function moves the value in member model
     * @param _model New value to be moved in member model
     */
    eProsima_user_DllExport void model(
            std::string&& _model);

    /*!
     * @brief This function returns a constant reference to member model
     * @return Constant reference to member model
     */
    eProsima_user_DllExport const std::string& model() const;

    /*!
     * @brief This function returns a reference to member model
     * @return Reference to member model
     */
    eProsima_user_DllExport std::string& model();


    /*!
     * @brief This function copies the value in member raw_model
     * @param _raw_model New value to be copied in member raw_model
     */
    eProsima_user_DllExport void raw_model(
            const std::vector<uint8_t>& _raw_model);

    /*!
     * @brief This function moves the value in member raw_model
     * @param _raw_model New value to be moved in member raw_model
     */
    eProsima_user_DllExport void raw_model(
            std::vector<uint8_t>&& _raw_model);

    /*!
     * @brief This function returns a constant reference to member raw_model
     * @return Constant reference to member raw_model
     */
    eProsima_user_DllExport const std::vector<uint8_t>& raw_model() const;

    /*!
     * @brief This function returns a reference to member raw_model
     * @return Reference to member raw_model
     */
    eProsima_user_DllExport std::vector<uint8_t>& raw_model();


    /*!
     * @brief This function copies the value in member model_properties_path
     * @param _model_properties_path New value to be copied in member model_properties_path
     */
    eProsima_user_DllExport void model_properties_path(
            const std::string& _model_properties_path);

    /*!
     * @brief This function moves the value in member model_properties_path
     * @param _model_properties_path New value to be moved in member model_properties_path
     */
    eProsima_user_DllExport void model_properties_path(
            std::string&& _model_properties_path);

    /*!
     * @brief This function returns a constant reference to member model_properties_path
     * @return Constant reference to member model_properties_path
     */
    eProsima_user_DllExport const std::string& model_properties_path() const;

    /*!
     * @brief This function returns a reference to member model_properties_path
     * @return Reference to member model_properties_path
     */
    eProsima_user_DllExport std::string& model_properties_path();


    /*!
     * @brief This function copies the value in member model_properties
     * @param _model_properties New value to be copied in member model_properties
     */
    eProsima_user_DllExport void model_properties(
            const std::string& _model_properties);

    /*!
     * @brief This function moves the value in member model_properties
     * @param _model_properties New value to be moved in member model_properties
     */
    eProsima_user_DllExport void model_properties(
            std::string&& _model_properties);

    /*!
     * @brief This function returns a constant reference to member model_properties
     * @return Constant reference to member model_properties
     */
    eProsima_user_DllExport const std::string& model_properties() const;

    /*!
     * @brief This function returns a reference to member model_properties
     * @return Reference to member model_properties
     */
    eProsima_user_DllExport std::string& model_properties();


    /*!
     * @brief This function copies the value in member input_batch
     * @param _input_batch New value to be copied in member input_batch
     */
    eProsima_user_DllExport void input_batch(
            const std::vector<std::string>& _input_batch);

    /*!
     * @brief This function moves the value in member input_batch
     * @param _input_batch New value to be moved in member input_batch
     */
    eProsima_user_DllExport void input_batch(
            std::vector<std::string>&& _input_batch);

    /*!
     * @brief This function returns a constant reference to member input_batch
     * @return Constant reference to member input_batch
     */
    eProsima_user_DllExport const std::vector<std::string>& input_batch() const;

    /*!
     * @brief This function returns a reference to member input_batch
     * @return Reference to member input_batch
     */
    eProsima_user_DllExport std::vector<std::string>& input_batch();


    /*!
     * @brief This function sets a value in member target_latency
     * @param _target_latency New value for member target_latency
     */
    eProsima_user_DllExport void target_latency(
            double _target_latency);

    /*!
     * @brief This function returns the value of member target_latency
     * @return Value of member target_latency
     */
    eProsima_user_DllExport double target_latency() const;

    /*!
     * @brief This function returns a reference to member target_latency
     * @return Reference to member target_latency
     */
    eProsima_user_DllExport double& target_latency();


    /*!
     * @brief This function copies the value in member extra_data
     * @param _extra_data New value to be copied in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            const std::vector<uint8_t>& _extra_data);

    /*!
     * @brief This function moves the value in member extra_data
     * @param _extra_data New value to be moved in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            std::vector<uint8_t>&& _extra_data);

    /*!
     * @brief This function returns a constant reference to member extra_data
     * @return Constant reference to member extra_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& extra_data() const;

    /*!
     * @brief This function returns a reference to member extra_data
     * @return Reference to member extra_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& extra_data();


    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const TaskIdImpl& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            TaskIdImpl&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const TaskIdImpl& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport TaskIdImpl& task_id();

private:

    std::string m_model_path;
    std::string m_model;
    std::vector<uint8_t> m_raw_model;
    std::string m_model_properties_path;
    std::string m_model_properties;
    std::vector<std::string> m_input_batch;
    double m_target_latency{0.0};
    std::vector<uint8_t> m_extra_data;
    TaskIdImpl m_task_id;

};


/*!
 * @brief This class represents the structure HWResourceImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class HWResourceImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport HWResourceImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~HWResourceImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object HWResourceImpl that will be copied.
     */
    eProsima_user_DllExport HWResourceImpl(
            const HWResourceImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object HWResourceImpl that will be copied.
     */
    eProsima_user_DllExport HWResourceImpl(
            HWResourceImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object HWResourceImpl that will be copied.
     */
    eProsima_user_DllExport HWResourceImpl& operator =(
            const HWResourceImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object HWResourceImpl that will be copied.
     */
    eProsima_user_DllExport HWResourceImpl& operator =(
            HWResourceImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x HWResourceImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const HWResourceImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x HWResourceImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const HWResourceImpl& x) const;

    /*!
     * @brief This function copies the value in member hw_description
     * @param _hw_description New value to be copied in member hw_description
     */
    eProsima_user_DllExport void hw_description(
            const std::string& _hw_description);

    /*!
     * @brief This function moves the value in member hw_description
     * @param _hw_description New value to be moved in member hw_description
     */
    eProsima_user_DllExport void hw_description(
            std::string&& _hw_description);

    /*!
     * @brief This function returns a constant reference to member hw_description
     * @return Constant reference to member hw_description
     */
    eProsima_user_DllExport const std::string& hw_description() const;

    /*!
     * @brief This function returns a reference to member hw_description
     * @return Reference to member hw_description
     */
    eProsima_user_DllExport std::string& hw_description();


    /*!
     * @brief This function sets a value in member power_consumption
     * @param _power_consumption New value for member power_consumption
     */
    eProsima_user_DllExport void power_consumption(
            double _power_consumption);

    /*!
     * @brief This function returns the value of member power_consumption
     * @return Value of member power_consumption
     */
    eProsima_user_DllExport double power_consumption() const;

    /*!
     * @brief This function returns a reference to member power_consumption
     * @return Reference to member power_consumption
     */
    eProsima_user_DllExport double& power_consumption();


    /*!
     * @brief This function sets a value in member latency
     * @param _latency New value for member latency
     */
    eProsima_user_DllExport void latency(
            double _latency);

    /*!
     * @brief This function returns the value of member latency
     * @return Value of member latency
     */
    eProsima_user_DllExport double latency() const;

    /*!
     * @brief This function returns a reference to member latency
     * @return Reference to member latency
     */
    eProsima_user_DllExport double& latency();


    /*!
     * @brief This function sets a value in member memory_footprint_of_ml_model
     * @param _memory_footprint_of_ml_model New value for member memory_footprint_of_ml_model
     */
    eProsima_user_DllExport void memory_footprint_of_ml_model(
            double _memory_footprint_of_ml_model);

    /*!
     * @brief This function returns the value of member memory_footprint_of_ml_model
     * @return Value of member memory_footprint_of_ml_model
     */
    eProsima_user_DllExport double memory_footprint_of_ml_model() const;

    /*!
     * @brief This function returns a reference to member memory_footprint_of_ml_model
     * @return Reference to member memory_footprint_of_ml_model
     */
    eProsima_user_DllExport double& memory_footprint_of_ml_model();


    /*!
     * @brief This function sets a value in member max_hw_memory_footprint
     * @param _max_hw_memory_footprint New value for member max_hw_memory_footprint
     */
    eProsima_user_DllExport void max_hw_memory_footprint(
            double _max_hw_memory_footprint);

    /*!
     * @brief This function returns the value of member max_hw_memory_footprint
     * @return Value of member max_hw_memory_footprint
     */
    eProsima_user_DllExport double max_hw_memory_footprint() const;

    /*!
     * @brief This function returns a reference to member max_hw_memory_footprint
     * @return Reference to member max_hw_memory_footprint
     */
    eProsima_user_DllExport double& max_hw_memory_footprint();


    /*!
     * @brief This function copies the value in member extra_data
     * @param _extra_data New value to be copied in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            const std::vector<uint8_t>& _extra_data);

    /*!
     * @brief This function moves the value in member extra_data
     * @param _extra_data New value to be moved in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            std::vector<uint8_t>&& _extra_data);

    /*!
     * @brief This function returns a constant reference to member extra_data
     * @return Constant reference to member extra_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& extra_data() const;

    /*!
     * @brief This function returns a reference to member extra_data
     * @return Reference to member extra_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& extra_data();


    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const TaskIdImpl& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            TaskIdImpl&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const TaskIdImpl& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport TaskIdImpl& task_id();

private:

    std::string m_hw_description;
    double m_power_consumption{0.0};
    double m_latency{0.0};
    double m_memory_footprint_of_ml_model{0.0};
    double m_max_hw_memory_footprint{0.0};
    std::vector<uint8_t> m_extra_data;
    TaskIdImpl m_task_id;

};


/*!
 * @brief This class represents the structure CO2FootprintImpl defined by the user in the IDL file.
 * @ingroup typesImpl
 */
class CO2FootprintImpl
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CO2FootprintImpl();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CO2FootprintImpl();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CO2FootprintImpl that will be copied.
     */
    eProsima_user_DllExport CO2FootprintImpl(
            const CO2FootprintImpl& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CO2FootprintImpl that will be copied.
     */
    eProsima_user_DllExport CO2FootprintImpl(
            CO2FootprintImpl&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CO2FootprintImpl that will be copied.
     */
    eProsima_user_DllExport CO2FootprintImpl& operator =(
            const CO2FootprintImpl& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CO2FootprintImpl that will be copied.
     */
    eProsima_user_DllExport CO2FootprintImpl& operator =(
            CO2FootprintImpl&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CO2FootprintImpl object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CO2FootprintImpl& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CO2FootprintImpl object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CO2FootprintImpl& x) const;

    /*!
     * @brief This function sets a value in member carbon_footprint
     * @param _carbon_footprint New value for member carbon_footprint
     */
    eProsima_user_DllExport void carbon_footprint(
            double _carbon_footprint);

    /*!
     * @brief This function returns the value of member carbon_footprint
     * @return Value of member carbon_footprint
     */
    eProsima_user_DllExport double carbon_footprint() const;

    /*!
     * @brief This function returns a reference to member carbon_footprint
     * @return Reference to member carbon_footprint
     */
    eProsima_user_DllExport double& carbon_footprint();


    /*!
     * @brief This function sets a value in member energy_consumption
     * @param _energy_consumption New value for member energy_consumption
     */
    eProsima_user_DllExport void energy_consumption(
            double _energy_consumption);

    /*!
     * @brief This function returns the value of member energy_consumption
     * @return Value of member energy_consumption
     */
    eProsima_user_DllExport double energy_consumption() const;

    /*!
     * @brief This function returns a reference to member energy_consumption
     * @return Reference to member energy_consumption
     */
    eProsima_user_DllExport double& energy_consumption();


    /*!
     * @brief This function sets a value in member carbon_intensity
     * @param _carbon_intensity New value for member carbon_intensity
     */
    eProsima_user_DllExport void carbon_intensity(
            double _carbon_intensity);

    /*!
     * @brief This function returns the value of member carbon_intensity
     * @return Value of member carbon_intensity
     */
    eProsima_user_DllExport double carbon_intensity() const;

    /*!
     * @brief This function returns a reference to member carbon_intensity
     * @return Reference to member carbon_intensity
     */
    eProsima_user_DllExport double& carbon_intensity();


    /*!
     * @brief This function copies the value in member extra_data
     * @param _extra_data New value to be copied in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            const std::vector<uint8_t>& _extra_data);

    /*!
     * @brief This function moves the value in member extra_data
     * @param _extra_data New value to be moved in member extra_data
     */
    eProsima_user_DllExport void extra_data(
            std::vector<uint8_t>&& _extra_data);

    /*!
     * @brief This function returns a constant reference to member extra_data
     * @return Constant reference to member extra_data
     */
    eProsima_user_DllExport const std::vector<uint8_t>& extra_data() const;

    /*!
     * @brief This function returns a reference to member extra_data
     * @return Reference to member extra_data
     */
    eProsima_user_DllExport std::vector<uint8_t>& extra_data();


    /*!
     * @brief This function copies the value in member task_id
     * @param _task_id New value to be copied in member task_id
     */
    eProsima_user_DllExport void task_id(
            const TaskIdImpl& _task_id);

    /*!
     * @brief This function moves the value in member task_id
     * @param _task_id New value to be moved in member task_id
     */
    eProsima_user_DllExport void task_id(
            TaskIdImpl&& _task_id);

    /*!
     * @brief This function returns a constant reference to member task_id
     * @return Constant reference to member task_id
     */
    eProsima_user_DllExport const TaskIdImpl& task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport TaskIdImpl& task_id();

private:

    double m_carbon_footprint{0.0};
    double m_energy_consumption{0.0};
    double m_carbon_intensity{0.0};
    std::vector<uint8_t> m_extra_data;
    TaskIdImpl m_task_id;

};

#endif // _FAST_DDS_GENERATED_TYPESIMPL_H_



