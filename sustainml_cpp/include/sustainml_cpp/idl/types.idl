enum Status {
    NODE_INACTIVE,
    NODE_INITIALIZING,
    NODE_IDLE,
    NODE_RUNNING,
    NODE_ERROR,
    NODE_TERMINATING
};

enum TaskStatus {
    TASK_WAITING,
    TASK_RUNNING,
    TASK_ERROR,
    TASK_SUCCEEDED
};

enum ErrorCode {
    NO_ERROR,
    INTERNAL_ERROR
};

struct NodeStatus
{
    Status node_status;
    TaskStatus task_status;
    ErrorCode error_code;
    @Key long task_id;
    string error_description;
    @Key string node_name;
};

enum CmdNode {
    NO_CMD_NODE,
    CMD_START_NODE,
    CMD_STOP_NODE,
    CMD_RESET_NODE,
    CMD_TERMINATE_NODE
};

enum CmdTask {
    NO_CMD_TASK,
    CMD_STOP_TASK,
    CMD_RESET_TASK,
    CMD_PREEMPT_TASK,
    CMD_TERMINATE_TASK
};

struct NodeControl
{
    CmdNode cmd_node;
    CmdTask cmd_task;
    string target_node;
    long task_id;
    @Key string source_node;
};

struct GeoLocation
{
    string continent;
    string region;
};

struct UserInput
{
    string problem_description;
    GeoLocation geo_location;
    @Key long task_id;
};

struct EncodedTask
{
    sequence<string> keywords;
    @Key long task_id;
};

struct MLModel
{
    string model_path;
    string model; // In case of remote approach
    string model_properties_path;
    string model_properties;
    @Key long task_id;
};

struct HWResource
{
    string hw_description;
    double power_consumption;
    @Key long task_id;
};

struct CO2Footprint
{
    double co2_footprint;
    double energy_consumption;
    double carbon_intensity;
    @Key long task_id;
};
